AWSTemplateFormatVersion: '2010-09-09'
Description: >
    This CloudFormation template will deploy a full CI/CD pipeline for the Automated 
    infrastructure Compliance Framework. It includes building with AWS CodeBuild modules 
    for the various stages of the framework.

Parameters:

    ApplicationName:
        Description: This will be used to name the pipeline and build resources
        Type: String
        AllowedPattern: '[A-Za-z0-9-]+'

    ArtifactS3Bucket:
        Description: An existing S3 bucket within this AWS account
        Type: String

    GitHubOAuthToken:
        Description: Create a token with 'repo' and 'admin:repo_hook' permissions here https://github.com/settings/tokens
        Type: String

    GitHubUser:
        Description: Enter GitHub username of the repository owner
        Type: String

    GitHubRepository:
        Description: Enter the repository name that should be monitored for changes
        Type: String

    GitHubBranch:
        Description: Enter the GitHub branch to monitored
        Type: String

    TerraformSha256:
        Type: String

    TerraformVersion:
        Type: String

    TerraformCloudToken:
        Type: String

    Fugueenvironmentid:
        Type: String

    Intervalinseconds:
        Type: String

    FugueCLIENTID:
        Type: String

    FugueCLIENTSECRET:
        Type: String
    
    REGULAVERSION:
        Type: String
    
    OPAVERSION:
        Type: String

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: Application Configuration
                Parameters:
                    - ApplicationName
                    - ArtifactS3Bucket
            -
                Label:
                    default: GitHub Configuration
                Parameters:
                    - GitHubOAuthToken
                    - GitHubUser
                    - GitHubRepository
                    - GitHubBranch

Resources:
    CodePipeline:
        Type: AWS::CodePipeline::Pipeline
        Properties:
            Name: !Ref ApplicationName
            RoleArn: !Sub ${CodePipelineRole.Arn}
            ArtifactStore:
                Type: S3
                Location: !Ref ArtifactS3Bucket
            Stages:
                -
                    Name: Source
                    Actions:
                        -
                            Name: GitHub
                            RunOrder: 1
                            ActionTypeId:
                                Category: Source
                                Owner: ThirdParty
                                Version: 1
                                Provider: GitHub
                            OutputArtifacts:
                                -  Name: Source
                            Configuration:
                                Owner: !Ref GitHubUser
                                Repo: !Ref GitHubRepository
                                PollForSourceChanges: false
                                Branch: !Ref GitHubBranch
                                OAuthToken: !Ref GitHubOAuthToken
                -
                    Name: OPAcheck
                    Actions:
                        -
                            Name: CodeBuild
                            RunOrder: 1
                            InputArtifacts:
                                - Name: Source
                            ActionTypeId:
                                Category: Build
                                Owner: AWS
                                Version: 1
                                Provider: CodeBuild
                            OutputArtifacts:
                                - Name: Built
                            Configuration:
                                ProjectName: !Ref CodeBuild
                -
                    Name: TerraformApply
                    Actions:
                        -
                            Name: Deploy
                            RunOrder: 1
                            InputArtifacts:
                                - Name: Source
                            ActionTypeId:
                                Category: Build
                                Owner: AWS
                                Version: 1
                                Provider: CodeBuild
                            OutputArtifacts:
                                - Name: Deployment
                            Configuration:
                                ProjectName: !Ref TerraformApply
                -
                    Name: TerraformDestroyManualCheck
                    Actions:
                        -
                            Name: ManualApproval
                            RunOrder: 1
                            ActionTypeId:
                                Category: Approval
                                Owner: AWS
                                Version: 1
                                Provider: Manual
                            Configuration:
                                CustomData: "Infrastructure tear down manual approval!!"
                -
                    Name: TerraformDestroy
                    Actions:
                        -
                            Name: Destroy
                            RunOrder: 1
                            InputArtifacts:
                                - Name: Source
                            ActionTypeId:
                                Category: Build
                                Owner: AWS
                                Version: 1
                                Provider: CodeBuild
                            OutputArtifacts:
                                - Name: Destory
                            Configuration:
                                ProjectName: !Ref TerraformDestroy

    CodeBuild:
        Type: AWS::CodeBuild::Project
        Properties:
            Name: TerraformPlanAndOPA
            Description: !Sub Build project for ${ApplicationName}
            ServiceRole: !Ref CodeBuildRole
            Cache:
              Type: NO_CACHE
            Environment:
                ComputeType: BUILD_GENERAL1_MEDIUM
                Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
                Type: LINUX_CONTAINER
            Artifacts:
                Type: CODEPIPELINE
            Source:
                BuildSpec: !Sub |-
                        version: 0.2
                              
                        phases:
                          install:
                            commands:
                              - source=`pwd`
                              - # Install Terraform
                              - cd /tmp && curl -o /tmp/terraform.zip https://releases.hashicorp.com/terraform/${TerraformVersion}/terraform_${TerraformVersion}_linux_amd64.zip && echo "${TerraformSha256} terraform.zip" | sha256sum -c --quiet && unzip terraform.zip && mv terraform /usr/bin
                              - # Install OPA bin
                              - curl -L -o opa https://github.com/open-policy-agent/opa/releases/download/v${OPAVERSION}/opa_linux_amd64 && chmod +x opa && mv opa /usr/bin
                              - # Install regula script and libraries.
                              - mkdir -p /usr/bin/regula && curl -L "https://github.com/fugue/regula/archive/v${REGULAVERSION}.tar.gz" | tar -xz --strip-components=1 -C /usr/bin/regula
                          build:
                            commands:
                              - cd $source
                              - printf 'credentials "app.terraform.io" {\n    token = "${TerraformCloudToken}"\n}' >> ~/.terraform.rc
                              - export TF_CLI_CONFIG_FILE="/root/.terraform.rc"
                              - terraform init -no-color && terraform destroy -auto-approve -no-color
                              - # terraform init -no-color && terraform output -json && terraform destroy -auto-approve -no-color
                              - terraform plan --out tfplan.binary -no-color && terraform show -json tfplan.binary -no-color > tfplan.json
                              - opa eval --format pretty --input tfplan.json --data /usr/bin/regula/lib --data /usr/bin/regula/rules/aws --data /usr/bin/regula/examples/aws/tag_all_resources.rego 'data.fugue.regula.report' | tee evaluate
                              - TERRAFORM_VALID=$(jq -r '.summary.valid' "evaluate")
                              - if [ "$TERRAFORM_VALID" == "true" ]; then echo -e "\nTerraform resources plan PASSES OPA authorization!\n" && exit 0; else echo -e "\n!!! Terraform resources plan FAILS OPA authorization !!!\n" && exit 1; fi
                InsecureSsl: false
                Type: CODEPIPELINE
                
    TerraformApply:
        Type: AWS::CodeBuild::Project
        Properties:
            Name: TerraformApply
            Description: !Sub Build project for ${ApplicationName}
            ServiceRole: !Ref CodeBuildRole
            Cache:
              Type: NO_CACHE
            Environment:
                ComputeType: BUILD_GENERAL1_MEDIUM
                Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
                Type: LINUX_CONTAINER
                EnvironmentVariables: [
                    {
                      "Name" : Interval,
                      "Type" : PLAINTEXT,
                      "Value" : !Ref Intervalinseconds
                    }
                ]
            Artifacts:
                Type: CODEPIPELINE
            Source:
                BuildSpec: !Sub |-
                        version: 0.2

                        phases:
                          install:
                            commands:
                              - source=`pwd`
                              - cd /tmp && curl -o /tmp/terraform.zip https://releases.hashicorp.com/terraform/${TerraformVersion}/terraform_${TerraformVersion}_linux_amd64.zip && echo "${TerraformSha256} terraform.zip" | sha256sum -c --quiet && unzip terraform.zip && mv terraform /usr/bin
                          build:
                            commands:
                              - cd $source
                              - printf 'credentials "app.terraform.io" {\n    token = "${TerraformCloudToken}"\n}' >> ~/.terraform.rc
                              - export TF_CLI_CONFIG_FILE="/root/.terraform.rc"
                              - echo -e "\nTurn off Fugue drift detection.\n"
                              - >-
                                curl -X PATCH "https://api.riskmanager.fugue.co/v0/environments/${Fugueenvironmentid}" -u ${FugueCLIENTID}:${FugueCLIENTSECRET} -d '{"baseline_id": "","remediation": false}' && sleep 10
                              - terraform init -no-color
                              - terraform apply -auto-approve -no-color
                              - echo -e "\nTerraform apply completed!!\n"
                              - echo -e "\nRescan environment and grab new scan id.\n"
                              - content=$(curl -X POST "https://api.riskmanager.fugue.co/v0/scans?environment_id=${Fugueenvironmentid}" -u ${FugueCLIENTID}:${FugueCLIENTSECRET})
                              - Fugue_scan_id=$(jq -r '.id' <<< "$content")
                              - echo $Fugue_scan_id
                              - echo -e "\nFugue re-baseline scan commencing.\n"
                              - str="does not belong to environment"
                              - content="does not belong to environment"
                              - >-
                                while [[ $content == *$str* ]]; do echo -e "Bad request message is expected. Waiting for Fugue scan to finish....\n"; content=$(curl -X PATCH "https://api.riskmanager.fugue.co/v0/environments/${Fugueenvironmentid}" -u ${FugueCLIENTID}:${FugueCLIENTSECRET} -d '{"baseline_id": "'$Fugue_scan_id'","scan_interval": "'$Interval'","remediation": false}'); echo -e "\n$content\n"; sleep 5; done
                              - echo -e "\nFugue environment re-baselined, baseline enforcement and drift detection disabled!"
                InsecureSsl: false
                Type: CODEPIPELINE

    TerraformDestroy:
        Type: AWS::CodeBuild::Project
        Properties:
            Name: TerraformDestroy
            Description: !Sub Build project for ${ApplicationName}
            ServiceRole: !Ref CodeBuildRole
            Cache:
              Type: NO_CACHE
            Environment:
                ComputeType: BUILD_GENERAL1_MEDIUM
                Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
                Type: LINUX_CONTAINER
                EnvironmentVariables: [
                    {
                      "Name" : Interval,
                      "Type" : PLAINTEXT,
                      "Value" : !Ref Intervalinseconds
                    }
                ]
            Artifacts:
                Type: CODEPIPELINE
            Source:
                BuildSpec: !Sub |-
                        version: 0.2

                        phases:
                          install:
                            commands:
                              - source=`pwd`
                              - cd /tmp && curl -o /tmp/terraform.zip https://releases.hashicorp.com/terraform/${TerraformVersion}/terraform_${TerraformVersion}_linux_amd64.zip && echo "${TerraformSha256} terraform.zip" | sha256sum -c --quiet && unzip terraform.zip && mv terraform /usr/bin
                          build:
                            commands:
                              - cd $source
                              - printf 'credentials "app.terraform.io" {\n    token = "${TerraformCloudToken}"\n}' >> ~/.terraform.rc
                              - export TF_CLI_CONFIG_FILE="/root/.terraform.rc"
                              - echo -e "\nTurn off Fugue drift detection.\n"
                              - >-
                                curl -X PATCH "https://api.riskmanager.fugue.co/v0/environments/${Fugueenvironmentid}" -u ${FugueCLIENTID}:${FugueCLIENTSECRET} -d '{"baseline_id": "","remediation": false}' && sleep 10
                              - terraform init -no-color
                              - terraform destroy -auto-approve -no-color
                              - content=$(curl -X POST "https://api.riskmanager.fugue.co/v0/scans?environment_id=${Fugueenvironmentid}" -u ${FugueCLIENTID}:${FugueCLIENTSECRET})
                              - Fugue_scan_id=$(jq -r '.id' <<< "$content")
                              - str="does not belong to environment"
                              - content="does not belong to environment"
                              - >-
                                while [[ $content == *$str* ]]; do echo -e "Bad request message is expected. Waiting for Fugue scan to finish....\n"; content=$(curl -X PATCH "https://api.riskmanager.fugue.co/v0/environments/${Fugueenvironmentid}" -u ${FugueCLIENTID}:${FugueCLIENTSECRET} -d '{"baseline_id": "'$Fugue_scan_id'","scan_interval": "'$Interval'","remediation": false}'); echo -e "\n$content\n"; sleep 5; done
                              - echo -e "\nTerraform environment destroyed and fugue environment re-baselined!!.\n"
                InsecureSsl: false
                Type: CODEPIPELINE

    CodePipelineRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${ApplicationName}-CodePipeline-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "codepipeline.amazonaws.com"
                        }
                    }]
                }
            Policies:
                -
                    PolicyName: !Sub ${ApplicationName}-CodePipeline-${AWS::Region}
                    PolicyDocument: !Sub |
                        {
                            "Statement": [
                                {
                                    "Action": [ "s3:GetBucketVersioning" ],
                                    "Resource": [ "arn:aws:s3:::${ArtifactS3Bucket}" ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "S3:GetObjectVersion"
                                    ],
                                    "Resource": [
                                        "arn:aws:s3:::${ArtifactS3Bucket}/*"
                                    ],
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codedeploy:CreateDeployment",
                                        "codedeploy:GetApplicationRevision",
                                        "codedeploy:GetDeployment",
                                        "codedeploy:GetDeploymentConfig",
                                        "codedeploy:RegisterApplicationRevision"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "cloudformation:CreateStack",
                                        "cloudformation:DeleteStack",
                                        "cloudformation:DescribeStacks",
                                        "cloudformation:UpdateStack",
                                        "cloudformation:CreateChangeSet",
                                        "cloudformation:DeleteChangeSet",
                                        "cloudformation:DescribeChangeSet",
                                        "cloudformation:ExecuteChangeSet",
                                        "cloudformation:SetStackPolicy",
                                        "cloudformation:ValidateTemplate",
                                        "sns:Publish",
                                        "lambda:ListFunctions",
                                        "lambda:InvokeFunction",
                                        "iam:PassRole"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                },
                                {
                                    "Action": [
                                        "codebuild:BatchGetBuilds",
                                        "codebuild:StartBuild"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                }
                            ]
                        }
    CodePipelineCloudFormationRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}
            AssumeRolePolicyDocument: |
                    {
                        "Statement": [{
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "cloudformation.amazonaws.com"
                            }
                        }]
                    }
            Policies:
                -
                    PolicyName: !Sub ${ApplicationName}-CloudFormation-${AWS::Region}
                    PolicyDocument: !Sub |
                        {
                            "Statement": [{
                                    "Effect": "Allow",
                                    "Action": [ "*" ],
                                    "Resource": "*"
                            }]
                        }
    CodeDeployServiceRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${ApplicationName}-CodeDeploy-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "codedeploy.amazonaws.com"
                        }
                    }]
                }
            Policies:
                - PolicyName: !Sub ${AWS::StackName}-CodeDeploy-${AWS::Region}
                  PolicyDocument: !Sub |
                    {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                            "Effect": "Allow",
                            "Action": [
                                "autoscaling:CompleteLifecycleAction",
                                "autoscaling:DeleteLifecycleHook",
                                "autoscaling:DescribeAutoScalingGroups",
                                "autoscaling:DescribeLifecycleHooks",
                                "autoscaling:PutLifecycleHook",
                                "autoscaling:RecordLifecycleActionHeartbeat",
                                "ec2:DescribeInstances",
                                "ec2:DescribeInstanceStatus",
                                "tag:GetTags",
                                "tag:GetResources",
                                "sns:Publish",
                                "cloudwatch:DescribeAlarms"
                            ],
                            "Resource": "*"
                            }
                        ]
                    }
    CodeBuildRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            RoleName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
            AssumeRolePolicyDocument: |
                    {
                        "Statement": [{
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "codebuild.amazonaws.com"
                            }
                        }]
                    }
            Policies:
                -
                    PolicyName: !Sub ${ApplicationName}-CodeBuild-${AWS::Region}
                    PolicyDocument: !Sub |
                        {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Resource": [ "*" ],
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents",
                                        "sns:Publish"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:s3:::${ArtifactS3Bucket}/*"
                                    ],
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:GetObjectVersion",
                                        "s3:PutObject"
                                    ]
                                }
                            ]
                        }

Outputs:

    CodePipelineURL:
        Description: The URL for the created pipeline
        Value: !Sub https://${AWS::Region}.console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${ApplicationName}

    CodeDeployServiceRoleArn:
        Description: The CodeDeploy service role used across all environments
        Value: !GetAtt CodeDeployServiceRole.Arn
        Export:
            Name: !Sub CodeDeployServiceRoleArn-${ApplicationName}
